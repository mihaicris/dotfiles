#!/usr/bin/env zsh
function pull_branch {
    REPO_PATH=$1
    [[ -d $REPO_PATH ]] || { echo "Repo $REPO_PATH not valid!"; return 1 ; }

    git -C $REPO_PATH fetch --all

    CURRENT_BRANCH=$(git -C $REPO_PATH symbolic-ref -q --short HEAD)
    IS_ON_REMOTE=$(git -C $REPO_PATH ls-remote --heads --exit-code $REMOTE_NAME $CURRENT_BRANCH)

    if [[ -z $CURRENT_BRANCH ]]; then
        print "On branch: ${LIGHT_RED}Detached state${NORMAL}"
    else
        [[ $IS_ON_REMOTE ]] && CL=${GREEN} || CL=${LIGHT_RED}
        print "On branch: ${CL}${CURRENT_BRANCH}${NORMAL}"
        if [[ $IS_ON_REMOTE ]] then
            git -C $REPO_PATH pull
        else
            print "Not on remote: ${BOLD}${REMOTE_NAME}${NORMAL}"
        fi
    fi
    print ""
}

heading "Fast forwarding all workdirs and submodules"

is_git_folder || exit 1

TOP_LEVEL_DIR=$(git rev-parse --show-toplevel)
REMOTE_NAME=$(git -C $TOP_LEVEL_DIR remote)

WORKDIRS=$(git -C $TOP_LEVEL_DIR worktree list --porcelain | grep worktree | awk '{print $2}')
WORKDIRS=( ${(f)WORKDIRS} )

(( $#WORKDIRS == 1 )) && WORKDIRS=($TOP_LEVEL_DIR)

for WORKDIR in $WORKDIRS; do
    print "${UNDERLINE}${BOLD}${BLUE}${WORKDIR}${NORMAL} "
    pull_branch $WORKDIR
    SUBMODULES=$(git -C $WORKDIR config --file $WORKDIR/.gitmodules --get-regexp path | awk '{ print $2 }')
    SUBMODULES=( ${(f)SUBMODULES} )
    (( $#SUBMODULES == 0 )) && continue
    for SUBMODULE in $SUBMODULES; do
        print "${UNDERLINE}${BOLD}${BLUE}${SUBMODULE}${NORMAL} "
        pull_branch $WORKDIR/$SUBMODULE
    done
done
