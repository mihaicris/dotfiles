#!/usr/bin/env zsh

heading "Fast forwarding all workdirs and git submodules"

is_git_folder || exit 1

function pull_branch {
    REPO_PATH=$1
    REMOTE_NAME=$(git -C $REPO_PATH remote)

    [[ -d $REPO_PATH ]] || { echo "Repo $REPO_PATH not valid!"; return 1; }
    [[ $REMOTE_NAME ]] || { echo "No remotes available for $REPO_PATH !"; return 1; }

    git -C $REPO_PATH fetch --all
    git -C $REPO_PATH remote prune $REMOTE_NAME

    CURRENT_BRANCH=$(git -C $REPO_PATH symbolic-ref -q --short HEAD)
    IS_ON_REMOTE=$(git -C $REPO_PATH ls-remote --heads --exit-code $REMOTE_NAME $CURRENT_BRANCH)

    if [[ -z $CURRENT_BRANCH ]]; then
        print "On branch: ${LIGHT_RED}Detached state${NORMAL}"
    else
        [[ $IS_ON_REMOTE ]] && CL=${GREEN} || CL=${LIGHT_RED}
        print "On branch: ${CL}${CURRENT_BRANCH}${NORMAL}"
        if [[ $IS_ON_REMOTE ]] then
            git -C $REPO_PATH pull
        else
            print "Not on remote: ${BOLD}${REMOTE_NAME}${NORMAL}"
        fi
    fi
    print ""
}

TOP_LEVEL_DIR=$(git rev-parse --show-toplevel)

WORKDIRS=$(git -C $TOP_LEVEL_DIR worktree list \
               --porcelain \
           | grep worktree \
           | awk '{ print $2 }')

WORKDIRS=(${(f)WORKDIRS})

#(( $#WORKDIRS == 1 )) && WORKDIRS=($TOP_LEVEL_DIR)

for WORKDIR in $WORKDIRS; do
    SUBMODULES=$(git -C $WORKDIR config \
                     --file $WORKDIR/.gitmodules \
                     --get-regexp path \
                 | awk -v path="$WORKDIR/" '{ print path$2 }')

    REPOS=($WORKDIR ${(f)SUBMODULES})

    for REPO in $REPOS; do
        print "${UNDERLINE}${BOLD}${BLUE}${REPO}${NORMAL}"
        pull_branch $REPO
    done
done
